#1
def string_length(str1):
    count = 0
    
    for char in str1:
        count += 1
    
    return count

print (string_length('wykonane zadanie'))

#2
def char_frequency(str1):
    
    dict = {}
    
    for n in str1:
        keys = dict.keys()

        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    
    return dict

print(char_frequency('google.com'))

#3
def string_both_ends(str):
    if len(str) < 2:
        return ' '
        
    return str[0:2] + str[-2:]
    
print(string_both_ends('w3resource'))
print(string_both_ends('w3'))
print(string_both_ends('w'))

#4
def change_char(str1):
    char = str1[0]
    
    str1 = str1.replace(char, '$')
    
    str1 = char + str1[1:]
    
    return str1
    
print(change_char('restart'))

#5
def chars_mix_up(a, b):
    new_a = b[:2] + a[2:]
    new_b = a[:2] + b[2:]
    
    return new_a + ' ' + new_b
    
print(chars_mix_up('abc', 'xyz'))

#6
def add_string(str1):
    length = len(str1)
    
    if length > 2:
        if str1[-3:] == 'ing':
            str1 += 'ly'
        else:
            str1 += 'ing'
    return str1
    
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))

#7
def not_poor(str1):
    snot = str1.find('not')
    spoor = str1.find('poor')
    
    if spoor > snot and snot > 0 and spoor > 0:
        str1 = str1.replace(str1[snot:(spoor+4)], 'good')
        return str1
    else:
        return str1
        
print(not_poor('The lyrics is not that poor!'))
print(not_poor('The lyrics is poor!')) 

#8
def find_longest_word(words_list):
    word_len = []

    for n in words_list:
        word_len.append((len(n), n))

    word_len.sort()

    return word_len[-1][0], word_len[-1][1]

result = find_longest_word(["PHP", "Exercises", "Backend"])

print("\nLongest word: ", result[1])
print("Length of the longest word: ", result[0])

#9
def remove_char(str, n):
 
    first_part = str[:n]

    last_part = str[n+1:]

    return first_part + last_part

print(remove_char('Python', 0))
print(remove_char('Python', 3))
print(remove_char('Python', 5))

#10
def change_string(str1):
    return str1[-1:] + str1[1:-1] + str1[:1]

print(change_string('abcd'))
print(change_string('12345'))

#11
def odd_values_string(str):
    result = ""
    
    for i in range(len(str)):
        if i % 2 == 0:
            result = result + str[i]
    return result

print(odd_values_string('abcdef'))
print(odd_values_string('python'))

#12
def word_count(str):
    counts = dict()

    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
        
    return counts

print( word_count('frog, fox, turtle, fox, hamster.'))

#13 (20)
def reverse_string(str1):
    if len(str1) % 4 == 0:
        return ''.join(reversed(str1))
    
    return str1

print(reverse_string('abcd'))  
print(reverse_string('python'))

#14 (47)
str1 = 'W3RESOURCE.COM'

print(str1[:4].lower() + str1[4:])

#15 (53)
def first_repeated_char(str1):

    for index, c in enumerate(str1):

        if str1[:index + 1].count(c) > 1:
            return c

    return "None"

print(first_repeated_char("abcdabcd"))
print(first_repeated_char("abcd")) 

#16 (54)
def first_repeated_char_smallest_distance(str1):
    temp = {}
    for ch in str1:
        if ch in temp:
            return ch, str1.index(ch)
        else:
            temp[ch] = 0
    return 'None'

print(first_repeated_char_smallest_distance("abcabc"))
print(first_repeated_char_smallest_distance("abcb"))
print(first_repeated_char_smallest_distance("abcc"))
print(first_repeated_char_smallest_distance("abcxxy"))

#17 (55)
def first_repeated_word(str1):

    temp = set()
    
    for word in str1.split():
       
        if word in temp:
            return word
        else:
            temp.add(word)

    return 'None'

print(first_repeated_word("ab ca bc ab"))
print(first_repeated_word("ab ca bc ab ca ab bc"))
print(first_repeated_word("ab ca bc ca ab bc"))
print(first_repeated_word("ab ca bc")) 

#18 (44)
str1 = "w3resource"

for index, char in enumerate(str1):

    print("Current character", char, "position at", index)


#19 (45)
import string

alphabet = set(string.ascii_lowercase)

input_string = 'The quick brown fox jumps over the lazy dog'

print(set(input_string.lower()) >= alphabet)

input_string = 'The quick brown fox jumps over the lazy cat'

print(set(input_string.lower()) >= alphabet) 


#20 (46)
str1 = "The quick brown fox jumps over."

print(str1.split(' '))

str1 = "The-quick-brown-fox-jumps-over."

print(str1.split('-'))
